@page "/circles"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@using circles.api.contracts.Circles.Queries.GetList

@inject NavigationManager Navigation

@inject IHttpClientFactory HttpClientFactory

<PageTitle>Circles</PageTitle>

<h1>Circles</h1>

<button type="button" class="btn btn-lg btn-primary" @onclick="Navigate">Add</button>

<hr>

<EditForm Model="formParams" OnValidSubmit="QueryCircles" FormName="query">

    <div class="form-floating mb-3">
        <input id="Denomination" type="text" placeholder="Denomination" @bind="formParams.Denomination"
            class="form-control" autocomplete="off">

        <label for="Denomination" class="form-label">Denomination</label>
    </div>

    <div class="form-floating mb-3">
        <button type="submit" class="w-100 btn btn-lg btn-primary">Consultar</button>
    </div>

</EditForm>

<table class="table">
    <thead>
        <tr>
            <th>Denomination</th>
        </tr>
    </thead>
    <tbody>
        @if (results != null)
        {
            @foreach (var result in results)
            {
                <tr>
                    <td>

                        <NavLink class="link" href=" @($"circles/{@result.Id}")">@result.Denomination
                        </NavLink>

                    </td>
                </tr>
            }
        }
        <LoadingTag Loading="@_loading" />

    </tbody>
</table>


@code {

    bool _loading;

    private CircleQueryForm formParams { get; set; } = new();
    private List<CircleGetListResults>? results;

    protected async Task QueryCircles()
    {
        _loading = true;
        results = null;
        var httpClient = HttpClientFactory.CreateClient(CirclesConfiguration.DefaultHttpClient);
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"api/v1/circles?denomination={formParams.Denomination}");

        var response = await httpClient.SendAsync(requestMessage);
        if (response.IsSuccessStatusCode)
        {
            results = await response.Content.ReadFromJsonAsync<List<CircleGetListResults>>();
        }
        _loading = false;
    }

    private void Navigate()
    {
        Navigation.NavigateTo("circles/add");
    }

    class CircleQueryForm
    {
        public string? Denomination { get; set; }
    }
}
