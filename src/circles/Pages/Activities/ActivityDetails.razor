@page "/activities/{ActivityId}"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@using circles.api.contracts.Activities.Queries

@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<div class="title">Activity</div>


<div>
    <Message @ref="messageComponent" />
</div>

<LoadingTag Loading="@_loading" />

@if (result != null)
{
    <table class="table">
    <tr>
        <td>Name</td>
        <td>@result.Denomination</td>
    </tr>
    <tr>
        <td>Init Date</td>
        <td>@result.DateInit</td>
    </tr>

    <tr>
        <td>Location</td>
        <td>@result.LocationDenomination</td>
    </tr>

    <tr>
        <td>Members</td>
        <td>@result.Members.Count</td>
    </tr>

</table>


    <div>

</div>


}
<div id="map" style="height: 500px; width: 100%;"></div>
@code {

    bool _loading;
    [Parameter, EditorRequired]
    public string ActivityId { get; set; } = string.Empty;
    private Message messageComponent = new();

    private ActivityGetByIdResults? result;
    protected override async Task OnInitializedAsync()
    {
        await GetDetails();
    }

    private async Task GetDetails()
    {
        try
        {
            _loading = true;
            var httpClient = HttpClientFactory.CreateClient(CirclesConfiguration.DefaultHttpClient);

            result = await
            httpClient.GetFromJsonAsync<ActivityGetByIdResults>($"api/v1/activities/{ActivityId}");

            if (result.LocationLatitude != null)
            {
                await JSRuntime.InvokeVoidAsync("mapInterop.loadGoogleMaps", "AIzaSyC6AB0gYGTpJJBgpMzXmaLG-Yj_ex_5rXc");
                await JSRuntime.InvokeVoidAsync("mapInterop.initMap");
                await JSRuntime.InvokeVoidAsync("mapInterop.updateMap", result.LocationLatitude, result.LocationLongitude);
            }

        }
        catch (Exception e)
        {
            messageComponent.ShowMessage("An error has happened while quering the activity", 5, true);
        }
        finally
        {
            _loading = false;
        }

    }

}