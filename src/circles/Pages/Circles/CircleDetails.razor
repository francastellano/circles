@page "/circles/{Id}"

@using Microsoft.AspNetCore.Authorization
@using circles.api.contracts.Circles.Queries.GetById
@attribute [Authorize]

@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory


@if (Result != null)
{
    <div>
    <div> <strong>Description</strong></div>
    <div> @Result.Denomination</div>
</div>

    <div>
    <div> <strong>Owner</strong></div>
    <div> @Result.Creator</div>
</div>


    <button class="btn-lg" @onclick="GoMembers">Members</button>
    <button class="btn-lg" @onclick="GoSkills">Skills</button>
    <button class="btn-lg" @onclick="GoGoals">Goals</button>


}


@code {

    [Parameter, EditorRequired]
    public string Id { get; set; } = string.Empty;

    public CircleGetByIdResult? Result { get; set; }



    protected override async Task OnInitializedAsync()
    {
        await GetById();
    }

    public async Task GetById()
    {
        var httpClient = HttpClientFactory.CreateClient(CirclesConfiguration.DefaultHttpClient);

        Result = await
        httpClient.GetFromJsonAsync<CircleGetByIdResult>($"api/v1/circles/{Id}");
    }

    public void GoMembers()
    {
        Navigation.NavigateTo($"circles/{Id}/members");
    }


    public void GoSkills()
    {
        Navigation.NavigateTo($"circles/{Id}/skills");
    }

    public void GoGoals()
    {
        Navigation.NavigateTo($"circles/{Id}/goals");
    }
}