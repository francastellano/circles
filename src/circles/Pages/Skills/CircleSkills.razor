@page "/circles/{CircleId}/skills"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation

@using circles.api.contracts.Skills.Queries

<h2>Skills</h2>

<LoadingTag Loading="@_loading" />

<NavLink class="nav-link" href="@($"circles/{CircleId}")">Circle</NavLink>

<button type="button" class="btn btn-lg btn-primary" @onclick="Navigate">Add Main Skill</button>
<button type="button" class="btn btn-lg btn-primary" @onclick="ExpandCollapse">
    @(_expand ? "Collapse" : "Expand")
</button>

@if (skills != null)
{
    @foreach (var skill in skills.Where(e => e.MainSkill == null))
    {
        <tr>
    <td> @skill.Denomination</td>
    <td>
        <NavLink class="nav-link" @onclick="@(()=> NavigateChild(skill.Id.ToString()))"> Add Child Skill</NavLink>
    </td>
</tr>

        @if (_expand)
        {
            @foreach (var skillChild in skills.Where(e => e.MainSkill == skill.Id))
            {
                <tr>
    <td></td>
    <td>@skillChild.Denomination</td>
</tr>
            }

        }
    }

}



@code {
    bool _loading;
    bool _expand;
    [Parameter, EditorRequired]
    public string CircleId { get; set; } = string.Empty;
    List<CircleSkillGetListResult>? skills;

    protected override async Task OnInitializedAsync()
    {
        await GetItems();
    }

    public async Task GetItems()
    {
        _loading = true;
        var httpClient = HttpClientFactory.CreateClient(CirclesConfiguration.DefaultHttpClient);

        skills = await
        httpClient.GetFromJsonAsync<List<CircleSkillGetListResult>>($"api/v1/circles/{CircleId}/skills?circleId={CircleId}");
        _loading = false;
    }

    public void Navigate()
    {
        Navigation.NavigateTo($"circles/{CircleId}/skills/add");
    }

    public void NavigateChild(string MainId)
    {
        Navigation.NavigateTo($"circles/{CircleId}/skills/add/{MainId}");
    }

    public void ExpandCollapse()
    {
        _expand = !_expand;
    }
}