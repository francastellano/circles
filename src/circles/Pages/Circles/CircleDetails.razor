@page "/circles/{Id}"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@using circles.api.contracts.Circles.Queries.GetById

@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory


@if (Result != null)
{
    <div class="title">
    <div> @Result.Denomination</div>
</div>

    <section>



    </section>

    <div>
    <div> <strong>Owner</strong></div>
    <div> @Result.Creator</div>
</div>

    <div class="d-flex flex-column">
        <button class="nav-link" @onclick="@(()=> GoDetails("members"))">Members</button>
        <button class="nav-link" @onclick="@(()=> GoDetails("activities"))">Activities</button>
        <button class="nav-link" @onclick="@(()=> GoDetails("skills"))">Skills</button>
        <button class="nav-link" @onclick="@(()=> GoDetails("goals"))">Goals</button>
        <button class="nav-link" @onclick="@(()=> GoDetails("locations"))">Locations</button>
    </div>
}

@code {

    [Parameter, EditorRequired]
    public string Id { get; set; } = string.Empty;

    public CircleGetByIdResult? Result { get; set; }



    protected override async Task OnInitializedAsync()
    {
        await GetById();
    }

    public async Task GetById()
    {
        var httpClient = HttpClientFactory.CreateClient(CirclesConfiguration.DefaultHttpClient);

        Result = await
        httpClient.GetFromJsonAsync<CircleGetByIdResult>($"api/v1/circles/{Id}");
    }
    public void GoDetails(string address)
    {
        Navigation.NavigateTo($"circles/{Id}/{address}");
    }
}