@page "/circles/{CircleId}/locations"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation

@using circles.api.contracts.Skills.Queries
@using global::circles
@using global::circles.api.contracts.ActivityLocation.Queries

<h2>Locations</h2>

<NavLink class="nav-link" href="@($"circles/{CircleId}")">Circle</NavLink>

<button class="btn" @onclick="GetItems">Refresh</button>
<button class="btn" @onclick="Clear">Clear</button>
<button class="btn" @onclick="NavigateAdd">Add</button>

<LoadingTag Loading="@_loading" />

<table class="table">
    <thead>
    <tr>
        <td>
 Denomination</td>
 <td>Latitude</td>
 <td>Longitude</td>
 </tr>
 </thead>

@if (locations != null)
{
    
    @foreach (var location in locations)
    
        {
            <tr>
            <td>@location.Denomination</td>
            <td>@location.Longitude</td>
            <td>@location.Latitude</td>
            
            </tr>
        }
    
}


</table>



@code {
    bool _loading;

    [Parameter]
    public string CircleId { get; set; }= string.Empty;

    List<CircleLocationGetListResult>? locations;

    protected override async Task OnInitializedAsync()
    {
        await GetItems();
    }

    public void Clear(){
        locations = null;
    }

    public async Task GetItems()
    {
        _loading = true;
        var httpClient = HttpClientFactory.CreateClient(CirclesConfiguration.DefaultHttpClient);

        locations = await
        httpClient.GetFromJsonAsync<List<CircleLocationGetListResult>>($"api/v1/circles/{CircleId}/locations?circleId={CircleId}");
        _loading = false;
    }

    public void NavigateAdd(){
        Navigation.NavigateTo($"circles/{CircleId}/locations/add");
    }
}