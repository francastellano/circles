@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Circles4</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="circles">
                Circles
            </NavLink>
        </div>
        <hr>

        @if (circleId != null)
        {

            <div class="nav-item px-3">
                <NavLink class="nav-link" @onclick="@(()=> Navigate($"circles/{circleId}/members"))">
                    Members
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" @onclick="@(()=> Navigate($"circles/{circleId}/activities"))">
                    Activities
                </NavLink>
            </div>

            <hr>
            <div class="nav-item px-3">
                <NavLink class="nav-link" @onclick="@(()=> Navigate($"circles/{circleId}/admin"))">
                    Administration
                </NavLink>
            </div>

            <hr>

            <div class="nav-item px-3">
                <NavLink class="nav-link" @onclick="BeginLogOut">
                    Log out
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? circleId;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task LoadFromLocalStorage()
    {
        circleId = await localStorage.GetItemAsync<string>("circleId");
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadFromLocalStorage();
    }

    public async Task Navigate(string uri)
    {
        await LoadFromLocalStorage();
        if (circleId != null)
            Navigation.NavigateTo(uri);
    }
    public void BeginLogOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }
}
