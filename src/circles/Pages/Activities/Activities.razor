@page "/circles/{CircleId}/activities"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject NavigationManager Navigation

@inject IHttpClientFactory HttpClientFactory

@using circles.api.contracts.Activities.Queries

@using Microsoft.Extensions.Localization
@inject IStringLocalizer<General> GeneralLocalizer


<h2>Activities</h2>


<NavLink class="nav-link" href="@($"circles/{CircleId}")">Circle</NavLink>

<div class="button-group mb-2">
    <button class="btn" @onclick="GetItems">@GeneralLocalizer["general.refresh"]</button>
    <button class="btn" @onclick="Clear">@GeneralLocalizer["general.clean"]</button>
    <button class="btn" @onclick="NavigateToAdd">@GeneralLocalizer["general.add"]</button>
</div>

<container>
    <EditForm Model="formQuery" OnValidSubmit="GetItems" FormName="query">

        <div class="form-floating mb-3">
            <input id="Denomination" type="text" @bind="formQuery.Denomination" class="form-control" autocomplete="off">
            <label for="Denomination" class="form-label">@GeneralLocalizer["activities.denomination"]</label>
        </div>

        <div class="form-floating mb-3">
            <button type="submit" class="w-100 btn btn-lg btn-primary"
                disabled="@_loading">@GeneralLocalizer["general.query"]</button>
        </div>
    </EditForm>
</container>

<table class="table">
    <thead>
        <tr>
            <th>@GeneralLocalizer["activities.denomination"]</th>
            <th>Location</th>
            <th>Init</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var activity in results)
        {
            <tr>
                <td>@activity.Denomination</td>
                <td>@activity.LocationDenom</td>
                <td>@activity.Init</td>
            </tr>
        }
    </tbody>
</table>

@code {

    bool _loading;
    [Parameter, EditorRequired]
    public string CircleId { get; set; } = string.Empty;

    private List<ActivityGetListResults> results = new();

    FormQuery formQuery = new();

    public async Task GetItems()
    {
        _loading = true;
        var httpClient = HttpClientFactory.CreateClient(CirclesConfiguration.DefaultHttpClient);

        results = await
        httpClient.GetFromJsonAsync<List<ActivityGetListResults>>($"api/v1/circles/{CircleId}/activities?circleId={CircleId}&Denomination={formQuery.Denomination}");
        _loading = false;
    }

    class FormQuery
    {
        public string Denomination { get; set; } = string.Empty;
    }

    public void NavigateToAdd()
    {
        Navigation.NavigateTo($"activities/{CircleId}/add");
    }

    public void Clear()
    {
        results = null;
    }

}