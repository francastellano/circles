@page "/circles"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@using circles.Resources


@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using circles.api.contracts.Circles.Queries.GetList

@inject NavigationManager Navigation

@using Microsoft.Extensions.Localization


@inject IHttpClientFactory HttpClientFactory
@inject IStringLocalizer<General> GeneralLocalizer


<PageTitle>Circles</PageTitle>

<h1>Circles</h1>

<div>
    <Message @ref="messageComponent" />
</div>

<div class="button-group mb-2">
    <button class="btn" @onclick="GetItems">@GeneralLocalizer["general.query"]</button>
    <button class="btn" @onclick="Clear">@GeneralLocalizer["general.clean"]</button>
    <button class="btn" @onclick="NavigateToAdd">@GeneralLocalizer["general.add"]</button>
</div>

<hr>

<EditForm Model="formParams" OnValidSubmit="GetItems" FormName="query">

    <div class="form-floating mb-3">
        <input id="Denomination" type="text" placeholder="Denomination" @bind="formParams.Denomination"
            class="form-control" autocomplete="off">

        <label for="Denomination" class="form-label">@GeneralLocalizer["activities.denomination"]</label>
    </div>

</EditForm>

<table class="table">
    <thead>
        <tr>
            <th colspan="2">Denomination</th>
        </tr>
    </thead>
    <tbody>
        @if (results != null)
        {
            @foreach (var result in results)
            {
                <tr>
                    <td>
                        @result.Denomination
                    </td>
                    <td>
                        <button class="btn" @onclick="@(()=> NavigateToCircle(@result.Id.ToString()))">Go</button>
                    </td>
                </tr>
            }
        }
        <LoadingTag Loading="@_loading" />

    </tbody>
</table>


@code {
    bool _loading;
    private Message messageComponent = new();
    private CircleQueryForm formParams { get; set; } = new();
    private List<CircleGetListResults>? results;

    protected async Task GetItems()
    {
        _loading = true;
        try
        {
            results = null;
            var httpClient = HttpClientFactory.CreateClient(CirclesConfiguration.DefaultHttpClient);
            var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"api/v1/circles?denomination={formParams.Denomination}");

            var response = await httpClient.SendAsync(requestMessage);
            if (response.IsSuccessStatusCode)
            {
                results = await response.Content.ReadFromJsonAsync<List<CircleGetListResults>>();
            }
        }
        catch (Exception e)
        {
            // TODO: Log error
            messageComponent.ShowMessage("An error has happened while quering the circles", 3, true);
        }
        _loading = false;
    }

    private void NavigateToAdd()
    {
        Navigation.NavigateTo("circles/add");
    }

    class CircleQueryForm
    {
        public string? Denomination { get; set; }
    }

    private async Task NavigateToCircle(string CircleId)
    {
        await localStorage.SetItemAsync("circleId", CircleId);
        Navigation.NavigateTo($"circles/{CircleId}");
    }

    public void Clear()
    {
        results = null;
    }
}
