@page "/circles/{CircleId}/locations"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@using circles.api.contracts.Skills.Queries
@using global::circles
@using global::circles.api.contracts.ActivityLocation.Queries

<h2>Locations</h2>

<NavLink class="nav-link" href="@($"circles/{CircleId}")">Circle</NavLink>

<button class="btn" @onclick="GetItems">Refresh</button>
<button class="btn" @onclick="Clear">Clear</button>
<button class="btn" @onclick="NavigateAdd">Add</button>

<LoadingTag Loading="@_loading" />

<table class="table">
    <thead>
        <tr>
            <td>Denomination</td>
            <td class="d-none d-md-table-cell">Latitude</td>
            <td class="d-none d-md-table-cell">Longitude</td>
            <td>Action</td>
        </tr>
    </thead>

    @if (locations != null)
    {
        <tbody>
            @foreach (var location in locations)
            {
                <tr>
                    <td>@location.Denomination</td>
                    <td class="d-none d-md-table-cell">@location.Latitude</td>
                    <td class="d-none d-md-table-cell">@location.Longitude</td>
                    <td>
                        <button class="btn" @onclick="() => ShowOnMap(location.Latitude, location.Longitude)">
                            Show on Map
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    }

</table>

<div id="map" style="height: 500px; width: 100%;"></div>



@code {
    bool _loading;

    [Parameter]
    public string CircleId { get; set; } = string.Empty;

    List<CircleLocationGetListResult>? locations;

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("mapInterop.loadGoogleMaps", "AIzaSyC6AB0gYGTpJJBgpMzXmaLG-Yj_ex_5rXc");
        await JSRuntime.InvokeVoidAsync("mapInterop.initMap");
        await GetItems();
    }

    public void Clear()
    {
        locations = null;
    }

    public async Task GetItems()
    {
        _loading = true;
        var httpClient = HttpClientFactory.CreateClient(CirclesConfiguration.DefaultHttpClient);

        locations = await
        httpClient.GetFromJsonAsync<List<CircleLocationGetListResult>>($"api/v1/circles/{CircleId}/locations?circleId={CircleId}");
        _loading = false;
    }

    public void NavigateAdd()
    {
        Navigation.NavigateTo($"circles/{CircleId}/locations/add");
    }

    public async Task ShowOnMap(double? latitude, double? longitude)
    {
        await JSRuntime.InvokeVoidAsync("mapInterop.updateMap", latitude, longitude);
    }
}
