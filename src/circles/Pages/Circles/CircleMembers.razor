@page "/circles/{CircleId}/members"
@using circles.api.contracts.Members.Queries
@using circles.Pages.Members

@inject IHttpClientFactory HttpClientFactory

<h1>Circle Members</h1>

<LoadingTag Loading="@_loading" />

<NavLink class="nav-link" href="@($"circles/{CircleId}")">Circle</NavLink>

@if (members != null)
{
        <ul>
        @foreach (var member in members)
        {
                    <li>
                        <NavLink href="@($"members/{member.Id}")">
                        
                        @member.Email
                        </NavLink>
                        </li>

        }
        </ul>


        <MemberForm CircleId="@CircleId" />
}


@code {

    bool _loading;
    [Parameter, EditorRequired]
    public string CircleId { get; set; } = string.Empty;

    List<CircleListGetMemberResult>? members;

    protected override async Task OnInitializedAsync()
    {
        await GetMembers();
    }

    public async Task GetMembers()
    {
        _loading = true;
        var httpClient = HttpClientFactory.CreateClient(CirclesConfiguration.DefaultHttpClient);

        members = await
        httpClient.GetFromJsonAsync<List<CircleListGetMemberResult>>($"api/v1/circles/{CircleId}/members");
        _loading = false;
    }


}